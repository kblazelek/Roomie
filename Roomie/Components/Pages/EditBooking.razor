@page "/edit-booking/{BuildingId:int}/{RoomNumber:int}/{Token}/{Email}"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@using System.ComponentModel.DataAnnotations
@using Amazon.DynamoDBv2.DataModel
@using Roomie.Domain
@using Roomie.Dto
@inject NavigationManager Navigation

<h3>Edit Your Booking</h3>

@if (!isBookingLoaded)
{
    <h1>Loading booking details</h1>
}

@if (isBookingLoaded)
{
    <EditForm Model="@booking" OnValidSubmit="SaveBooking">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="firstName" class="form-label">First Name</label>
            <InputText id="firstName" class="form-control" @bind-Value="booking.FirstName" />
            <ValidationMessage For="@(() => booking.FirstName)" />
        </div>

        <div class="mb-3">
            <label for="lastName" class="form-label">Last Name</label>
            <InputText id="lastName" class="form-control" @bind-Value="booking.LastName" />
            <ValidationMessage For="@(() => booking.LastName)" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email Address</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="booking.Email" disabled />
            <ValidationMessage For="@(() => booking.Email)" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>

    @if (showPopup)
    {
        <div class="alert alert-success mt-3">
            @popupMessage
        </div>
    }
}

@code {
    [Parameter]
    public string Email { get; set; }

    [Parameter]
    public string Token { get; set; }

    [Parameter]
    public int BuildingId { get; set; }

    [Parameter]
    public int RoomNumber { get; set; }

    [Inject]
    public IDynamoDBContext Context { get; set; } = default!;

    private BookingModel booking;
    private Booking existingBooking;
    private bool isBookingLoaded = false;
    private bool showPopup = false;
    private string popupMessage { get; set; } = "Your booking has been successfully updated!";

    protected override async Task OnInitializedAsync()
    {
        // Validate the token and retrieve booking details
        existingBooking = await Context.LoadAsync<Booking>(BuildingId, RoomNumber);
        if (existingBooking != null && existingBooking.Token == Token && existingBooking.Email == Email)
        {
            booking = new BookingModel() { Email = existingBooking.Email, FirstName = existingBooking.FirstName, LastName = existingBooking.LastName };
            isBookingLoaded = true;
        }
        else
        {
            // Handle invalid token or booking not found
            Navigation.NavigateTo("/error");
        }
    }

    private void ClosePopup() { showPopup = false; }

    private async Task SaveBooking()
    {
        // Update booking details
        var updatedBooking = new Booking() { BuildingId = existingBooking.BuildingId, RoomNumber = existingBooking.RoomNumber, FirstName = booking.FirstName, LastName = booking.LastName, Email = booking.Email, Token = existingBooking.Token };
        await Context.SaveAsync(updatedBooking);
        popupMessage = "Your booking has been successfully updated!";
        showPopup = true;
    }
}
